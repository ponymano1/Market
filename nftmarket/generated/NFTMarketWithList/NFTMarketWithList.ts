// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class List extends ethereum.Event {
  get params(): List__Params {
    return new List__Params(this);
  }
}

export class List__Params {
  _event: List;

  constructor(event: List) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Sold extends ethereum.Event {
  get params(): Sold__Params {
    return new Sold__Params(this);
  }
}

export class Sold__Params {
  _event: Sold;

  constructor(event: Sold) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTMarketWithList extends ethereum.SmartContract {
  static bind(address: Address): NFTMarketWithList {
    return new NFTMarketWithList("NFTMarketWithList", address);
  }

  getOwner(tokenId: BigInt): Address {
    let result = super.call("getOwner", "getOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getOwner(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPrice(tokenId: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  listAllTokens(): Array<BigInt> {
    let result = super.call("listAllTokens", "listAllTokens():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_listAllTokens(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "listAllTokens",
      "listAllTokens():(uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nft_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ListCall extends ethereum.Call {
  get inputs(): ListCall__Inputs {
    return new ListCall__Inputs(this);
  }

  get outputs(): ListCall__Outputs {
    return new ListCall__Outputs(this);
  }
}

export class ListCall__Inputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ListCall__Outputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }
}

export class ListExCall extends ethereum.Call {
  get inputs(): ListExCall__Inputs {
    return new ListExCall__Inputs(this);
  }

  get outputs(): ListExCall__Outputs {
    return new ListExCall__Outputs(this);
  }
}

export class ListExCall__Inputs {
  _call: ListExCall;

  constructor(call: ListExCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ListExCall__Outputs {
  _call: ListExCall;

  constructor(call: ListExCall) {
    this._call = call;
  }
}

export class TokenRecivedCall extends ethereum.Call {
  get inputs(): TokenRecivedCall__Inputs {
    return new TokenRecivedCall__Inputs(this);
  }

  get outputs(): TokenRecivedCall__Outputs {
    return new TokenRecivedCall__Outputs(this);
  }
}

export class TokenRecivedCall__Inputs {
  _call: TokenRecivedCall;

  constructor(call: TokenRecivedCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TokenRecivedCall__Outputs {
  _call: TokenRecivedCall;

  constructor(call: TokenRecivedCall) {
    this._call = call;
  }
}
